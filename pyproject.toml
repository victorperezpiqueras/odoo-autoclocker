[tool.poetry]
name = "autoclocker"
version = "0.1.0"
description = ""
authors = ["vperez <vperez@teknei.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.12,<4.0.0"
aws-cdk-lib = "^2.173.4"
'aws-cdk.aws-lambda-python-alpha' = "^2.173.4"
constructs = "^10.4.2"

[tool.poetry.group.dev.dependencies]  # development dependencies
assertpy = "^1.1"
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
ruff = "^0.5.5"
pre-commit = "^3.8.0"
coverage = "^7.6.0"
mypy = "^1.13.0"
python-dotenv = "^1.0.1"
types-requests = "^2.32.0"

[tool.poetry.group.core.dependencies]  # core dependencies
python = ">=3.12,<4.0.0"
boto3 = "^1.34.151"
odoorpc = "^0.10.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
strict = true
exclude = [
    "cdk\\.out",
    "tests",
    "\\.venv" # This is created in the pipelines
]
mypy_path = 'app'
explicit_package_bases = true

[tool.ruff]
target-version = "py312"
src = [".", "app"]
exclude = [
    "cdk.out",
]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "S", # flake8-bandit
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501", # line too long, handled by formatter
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Ignore runtime type checking
  "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
addopts = "--cov=app --cov-report term-missing --cov-report json"
filterwarnings = [
    "ignore::DeprecationWarning:aws_lambda_powertools.*", # Powertools still uses deprecated methods from Pydantic
]
testpaths = "tests"
